"""
This type stub file was generated by pyright.
"""

from ..utils.colors import ORANGE_BOLD

def bar_factory(chars=..., *, tip=..., background=..., borders=..., errors=...):
    """Create a factory of a bar with the given styling parameters.
    Supports unicode grapheme clusters and emoji chars (those that has length one but when on
    screen occupies two cells).

    Now supports transparent fills! Just send a tip, and leave `chars` as None.
    Also tips are now considered for the 100%, which means it smoothly enters and exits the
    frame to get to 100%!! The effect is super cool, use a multi-char tip to see.

    Args:
        chars (Optional[str]): the sequence of increasing glyphs to fill the bar
            can be None for a transparent fill, unless tip is also None.
        tip (Optional[str): the tip in front of the bar
            can be None, unless chars is also None.
        background (Optional[str]): the pattern to be used underneath the bar
        borders (Optional[Union[str, Tuple[str, str]]): the pattern or patterns to be used
            before and after the bar
        errors (Optional[Union[str, Tuple[str, str]]): the pattern or patterns to be used
            when an underflow or overflow occurs

    Returns:
        a styled bar factory

    """
    ...

def bar_controller(inner_bar_factory): # -> (length: Unknown, spinner_factory: Unknown | None = None) -> ((percent: Unknown) -> Unknown):
    ...

def check(bar, t_compile, verbosity=..., *, steps=...): # -> None:
    """Check the data, codepoints, and even the animation of this bar.

    Args:
        verbosity (int): change the verbosity level
                         0 for brief data only (default)
                               /                 \\
                              /           3 to include animation
                             /                      \\
            1 to unfold bar data   ----------   4 to unfold bar data
                            |                        |
            2 to reveal codepoints   --------   5 to reveal codepoints
        steps (int): number of steps to display the bar progress

    """
    ...

SECTION = ORANGE_BOLD
CHECK = ...
HELP_MSG = ...
def spec_data(bar): # -> None:
    ...

def format_codepoints(frame): # -> str:
    ...

def render_data(bar, show_codepoints, steps): # -> None:
    ...

def bar_repr(bar, p): # -> tuple[tuple[Unknown, ...], str, str]:
    ...

def animate(bar): # -> None:
    ...

