"""
This type stub file was generated by pyright.
"""

from ..utils.colors import ORANGE_BOLD

def spinner_controller(*, natural, skip_compiler=...): # -> (spinner_inner_factory: Unknown, op_params: Unknown | None = None, extra_commands: Unknown | None = None) -> ((actual_length: Unknown | None = None) -> (Unknown | (() -> Generator[Unknown, None, None]))):
    ...

def extra_command(is_compiler): # -> (command: Unknown) -> Unknown:
    ...

EXTRA_COMMANDS = ...
@compiler_command
def replace(spec, old, new): # -> None:
    """Replace a portion of the frames by another with the same length.

    Args:
        old (str): the old string to be replaced
        new (str): the new string

    """
    ...

@compiler_command
def pause(spec, edges=..., center=..., other=...): # -> None:
    """Make the animation appear to pause at the edges or at the middle, or make it slower as
    a whole, or both.

    Use without arguments to get their defaults, which gives a small pause at the edges,
    very nice for bouncing text with `hide=False`. Please note that the defaults only apply
    if none of the params are set.

    In the future, I'd like to make this a `pace` command, which would receive a sequence
    of ints of any length, and apply it bouncing across the cycle. For example to smoothly
    decelerate it could be (6, 3, 2, 1), which would become (6, 3, 2, 1, 1, ..., 1, 2, 3, 6).

    Args:
        edges (Optional[int]): how many times the first and last frames of a cycle repeats
            default is 8.
        center (Optional[int]): how many times the middle frame of a cycle repeats
            default is 1.
        other (Optional[int]): how many times all the other frames of a cycle repeats
            default is 1.

    """
    ...

@compiler_command
def reshape(spec, num_frames): # -> None:
    """Reshape frame data into another grouping. It can be used to simplify content
    description, or for artistic effects.

    Args:
        num_frames (int): the number of consecutive frames to group

    """
    ...

@compiler_command
def bounce(spec): # -> None:
    """Make the animation bounce its cycles."""
    ...

@compiler_command
def transpose(spec): # -> None:
    """Transpose the frame content matrix, exchanging columns for rows. It can be used
    to simplify content description, or for artistic effects."""
    ...

@runner_command
def sequential(spec): # -> None:
    """Configure the runner to play the compiled cycles in sequential order."""
    ...

@runner_command
def randomize(spec, cycles=...): # -> None:
    """Configure the runner to play the compiled cycles in random order.

    Args:
        cycles (Optional[int]): number of cycles to play randomized

    """
    ...

def apply_extra_commands(spec, extra_commands): # -> None:
    ...

def spinner_compiler(gen, natural, extra_commands): # -> SimpleNamespace:
    """Optimized spinner compiler, which compiles ahead of time all frames of all cycles
    of a spinner.

    Args:
        gen (Generator): the generator expressions that defines the cycles and their frames
        natural (int): the natural length of the spinner
        extra_commands (tuple[tuple[cmd, list[Any], dict[Any]]]): requested extra commands

    Returns:
        the spec of a compiled animation

    """
    ...

def spinner_runner_factory(spec, t_compile, extra_commands): # -> () -> Generator[Unknown, None, None]:
    """Optimized spinner runner, which receives the spec of an animation, and controls
    the flow of cycles and frames already compiled to a certain screen length and with
    wide chars fixed, thus avoiding any overhead in runtime within complex spinners,
    while allowing their factories to be garbage collected.

    Args:
        spec (SimpleNamespace): the spec of an animation
        t_compile (about_time.Handler): the compile time information
        extra_commands (tuple[tuple[cmd, list[Any], dict[Any]]]): requested extra commands

    Returns:
        a spinner runner

    """
    ...

def check(spec, verbosity=...): # -> None:
    """Check the specs, contents, codepoints, and even the animation of this compiled spinner.
    
    Args:
        verbosity (int): change the verbosity level
                             0 for specs only (default)
                               /                 \\
                              /           3 to include animation
                             /                      \\
            1 to unfold frame data   --------   4 to unfold frame data
                            |                        |
            2 to reveal codepoints   --------   5 to reveal codepoints

    """
    ...

SECTION = ORANGE_BOLD
CHECK = ...
HELP_MSG = ...
def spec_data(spec): # -> None:
    ...

def format_codepoints(frame): # -> str:
    ...

def render_data(spec, show_codepoints): # -> None:
    ...

def animate(spec): # -> None:
    ...

